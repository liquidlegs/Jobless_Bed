use console::style;
use comfy_table::{Table, Cell, Row, Color};
use reqwest::{blocking::ClientBuilder, header::{USER_AGENT, HOST, ACCEPT, CONTENT_LENGTH}, Method};

use super::{GeneralError, MbQueryType};

pub mod mb_consts {
  pub const URL: &str = "https://mb-api.abuse.ch/api/v1/";
  pub const HOST: &str = "mb-api.abuse.ch";
  pub const G_RECENT: &str = "get_recent";
  pub const G_FILE_TYPE: &str = "get_file_type";
  pub const G_INFO: &str = "get_info";
}

pub struct MalwareBazaar {}
impl MalwareBazaar {

  /**Function queries the malware bazaar API for up to 100 samples that were recently added to the platform or all samples
   that were added in the last 60 minutes.
   * Params:
   *  apikey: &str        {The malware bazaar api key}
   *  select: MbQueryType {The type of query you want to run}
   * Returns Result<()>
   */
  pub fn query_recent_samples(apikey: &String, select: MbQueryType) -> std::result::Result<(), GeneralError> {
    let mut selector = String::new();

    // Either view the last 100 additions to the platform or samples added within the last hour.
    if select == MbQueryType::Time {
      selector.push_str("time");
    }

    else {
      selector.push_str("100");
    }
    
    // Prepare the POST request
    let builder = ClientBuilder::new()
      .build()?
      .request(Method::POST, mb_consts::URL)
      .header(ACCEPT, "application/json")
      .header(HOST, mb_consts::HOST)
      .header(USER_AGENT, "PE Potato 0.1.0")
      .header("API-KEY", apikey)
      .header(CONTENT_LENGTH, selector.len().clone())
      .form(&[("query", mb_consts::G_RECENT), ("selector", selector.as_str())]);

    // Send the request to the malware bazaar api and view the response.
    let response = builder.send()?;
    let text = response.text()?;

    println!("{text}");

    Ok(())
  }

  /**Function queries the malware bazaar API for malware samples by file type.
   * Params:
   *  apikey: &str    {The malware bazaar api key}
   *  params: String  {A string containing the file type and the nunber of results to be returned}
   * Returns Result<()>
   */
  pub fn query_file_type(apikey: &String, params: String) -> std::result::Result<(), GeneralError> {
    let split_params: Vec<&str> = params.split(":").collect();
    let mut limit = "";
    let mut file_type = "";

    if split_params.len() < 2 {
      file_type = split_params[0];
      limit = "30";
    }
    else {
      file_type = split_params[0];
      limit = split_params[1];
    }

    // Prepare the request.
    let builder = ClientBuilder::new()
    .build()?
    .request(Method::POST, mb_consts::URL)
    .header(ACCEPT, "application/json")
    .header(HOST, mb_consts::HOST)
    .header(USER_AGENT, "PE Potato 0.1.0")
    .header("API-KEY", apikey)
    .header(CONTENT_LENGTH, 100)
    .form(&[("query", mb_consts::G_FILE_TYPE), ("file_type", file_type), ("limit", limit)]);

    // Get the response.
    let response = builder.send()?;
    let text = response.text()?;

    println!("{text}");

    Ok(())
  }

  pub fn query_hash(apikey: &String, hash: String) -> std::result::Result<(), GeneralError> {
    let builder = ClientBuilder::new()
    .build()?
    .request(Method::POST, mb_consts::URL)
    .header(ACCEPT, "application/json")
    .header(HOST, mb_consts::HOST)
    .header(USER_AGENT, "PE Potato 0.1.0")
    .header("API-KEY", apikey)
    .header(CONTENT_LENGTH, 100)
    .form(&[("query", mb_consts::G_INFO), ("hash", hash.as_str())]);
    
    let response = builder.send()?;
    let text = response.text()?;
    
    println!("{text}");

    Ok(())
  }
}



